
// AUTO GENERATED by vnxcppcodegen

#include <vnx/addons/package.hxx>
#include <vnx/addons/FileServerBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <vnx/Buffer.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/addons/FileServer_delete_file.hxx>
#include <vnx/addons/FileServer_delete_file_return.hxx>
#include <vnx/addons/FileServer_get_file_info.hxx>
#include <vnx/addons/FileServer_get_file_info_return.hxx>
#include <vnx/addons/FileServer_read_directory.hxx>
#include <vnx/addons/FileServer_read_directory_return.hxx>
#include <vnx/addons/FileServer_read_file.hxx>
#include <vnx/addons/FileServer_read_file_return.hxx>
#include <vnx/addons/FileServer_read_file_range.hxx>
#include <vnx/addons/FileServer_read_file_range_return.hxx>
#include <vnx/addons/FileServer_write_file.hxx>
#include <vnx/addons/FileServer_write_file_return.hxx>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>
#include <vnx/addons/file_info_t.hxx>

#include <vnx/vnx.h>


namespace vnx {
namespace addons {


const vnx::Hash64 FileServerBase::VNX_TYPE_HASH(0xcf578d3ac2b39852ull);
const vnx::Hash64 FileServerBase::VNX_CODE_HASH(0x9075df531fb8fb81ull);

FileServerBase::FileServerBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".www_root", www_root);
	vnx::read_config(vnx_name + ".mime_type_map", mime_type_map);
	vnx::read_config(vnx_name + ".directory_files", directory_files);
	vnx::read_config(vnx_name + ".redirect_not_found", redirect_not_found);
	vnx::read_config(vnx_name + ".allow_directory_list", allow_directory_list);
	vnx::read_config(vnx_name + ".read_only", read_only);
	vnx::read_config(vnx_name + ".show_hidden", show_hidden);
	vnx::read_config(vnx_name + ".max_queue_ms", max_queue_ms);
	vnx::read_config(vnx_name + ".max_queue_size", max_queue_size);
	vnx::read_config(vnx_name + ".limit_no_chunk", limit_no_chunk);
}

vnx::Hash64 FileServerBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string FileServerBase::get_type_name() const {
	return "vnx.addons.FileServer";
}

const vnx::TypeCode* FileServerBase::get_type_code() const {
	return vnx::addons::vnx_native_type_code_FileServerBase;
}

void FileServerBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::addons::vnx_native_type_code_FileServerBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, www_root);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, mime_type_map);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, directory_files);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, redirect_not_found);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, allow_directory_list);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, read_only);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, show_hidden);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, max_queue_ms);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, max_queue_size);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, limit_no_chunk);
	_visitor.type_end(*_type_code);
}

void FileServerBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"www_root\": "; vnx::write(_out, www_root);
	_out << ", \"mime_type_map\": "; vnx::write(_out, mime_type_map);
	_out << ", \"directory_files\": "; vnx::write(_out, directory_files);
	_out << ", \"redirect_not_found\": "; vnx::write(_out, redirect_not_found);
	_out << ", \"allow_directory_list\": "; vnx::write(_out, allow_directory_list);
	_out << ", \"read_only\": "; vnx::write(_out, read_only);
	_out << ", \"show_hidden\": "; vnx::write(_out, show_hidden);
	_out << ", \"max_queue_ms\": "; vnx::write(_out, max_queue_ms);
	_out << ", \"max_queue_size\": "; vnx::write(_out, max_queue_size);
	_out << ", \"limit_no_chunk\": "; vnx::write(_out, limit_no_chunk);
	_out << "}";
}

void FileServerBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object FileServerBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "vnx.addons.FileServer";
	_object["www_root"] = www_root;
	_object["mime_type_map"] = mime_type_map;
	_object["directory_files"] = directory_files;
	_object["redirect_not_found"] = redirect_not_found;
	_object["allow_directory_list"] = allow_directory_list;
	_object["read_only"] = read_only;
	_object["show_hidden"] = show_hidden;
	_object["max_queue_ms"] = max_queue_ms;
	_object["max_queue_size"] = max_queue_size;
	_object["limit_no_chunk"] = limit_no_chunk;
	return _object;
}

void FileServerBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "allow_directory_list") {
			_entry.second.to(allow_directory_list);
		} else if(_entry.first == "directory_files") {
			_entry.second.to(directory_files);
		} else if(_entry.first == "limit_no_chunk") {
			_entry.second.to(limit_no_chunk);
		} else if(_entry.first == "max_queue_ms") {
			_entry.second.to(max_queue_ms);
		} else if(_entry.first == "max_queue_size") {
			_entry.second.to(max_queue_size);
		} else if(_entry.first == "mime_type_map") {
			_entry.second.to(mime_type_map);
		} else if(_entry.first == "read_only") {
			_entry.second.to(read_only);
		} else if(_entry.first == "redirect_not_found") {
			_entry.second.to(redirect_not_found);
		} else if(_entry.first == "show_hidden") {
			_entry.second.to(show_hidden);
		} else if(_entry.first == "www_root") {
			_entry.second.to(www_root);
		}
	}
}

vnx::Variant FileServerBase::get_field(const std::string& _name) const {
	if(_name == "www_root") {
		return vnx::Variant(www_root);
	}
	if(_name == "mime_type_map") {
		return vnx::Variant(mime_type_map);
	}
	if(_name == "directory_files") {
		return vnx::Variant(directory_files);
	}
	if(_name == "redirect_not_found") {
		return vnx::Variant(redirect_not_found);
	}
	if(_name == "allow_directory_list") {
		return vnx::Variant(allow_directory_list);
	}
	if(_name == "read_only") {
		return vnx::Variant(read_only);
	}
	if(_name == "show_hidden") {
		return vnx::Variant(show_hidden);
	}
	if(_name == "max_queue_ms") {
		return vnx::Variant(max_queue_ms);
	}
	if(_name == "max_queue_size") {
		return vnx::Variant(max_queue_size);
	}
	if(_name == "limit_no_chunk") {
		return vnx::Variant(limit_no_chunk);
	}
	return vnx::Variant();
}

void FileServerBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "www_root") {
		_value.to(www_root);
	} else if(_name == "mime_type_map") {
		_value.to(mime_type_map);
	} else if(_name == "directory_files") {
		_value.to(directory_files);
	} else if(_name == "redirect_not_found") {
		_value.to(redirect_not_found);
	} else if(_name == "allow_directory_list") {
		_value.to(allow_directory_list);
	} else if(_name == "read_only") {
		_value.to(read_only);
	} else if(_name == "show_hidden") {
		_value.to(show_hidden);
	} else if(_name == "max_queue_ms") {
		_value.to(max_queue_ms);
	} else if(_name == "max_queue_size") {
		_value.to(max_queue_size);
	} else if(_name == "limit_no_chunk") {
		_value.to(limit_no_chunk);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const FileServerBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, FileServerBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* FileServerBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> FileServerBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.addons.FileServer";
	type_code->type_hash = vnx::Hash64(0xcf578d3ac2b39852ull);
	type_code->code_hash = vnx::Hash64(0x9075df531fb8fb81ull);
	type_code->is_native = true;
	type_code->native_size = sizeof(::vnx::addons::FileServerBase);
	type_code->methods.resize(17);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->methods[9] = ::vnx::addons::FileServer_delete_file::static_get_type_code();
	type_code->methods[10] = ::vnx::addons::FileServer_get_file_info::static_get_type_code();
	type_code->methods[11] = ::vnx::addons::FileServer_read_directory::static_get_type_code();
	type_code->methods[12] = ::vnx::addons::FileServer_read_file::static_get_type_code();
	type_code->methods[13] = ::vnx::addons::FileServer_read_file_range::static_get_type_code();
	type_code->methods[14] = ::vnx::addons::FileServer_write_file::static_get_type_code();
	type_code->methods[15] = ::vnx::addons::HttpComponent_http_request::static_get_type_code();
	type_code->methods[16] = ::vnx::addons::HttpComponent_http_request_chunk::static_get_type_code();
	type_code->fields.resize(10);
	{
		auto& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "www_root";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "mime_type_map";
		field.code = {13, 3, 32, 32};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "directory_files";
		field.code = {12, 32};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "redirect_not_found";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 1;
		field.name = "allow_directory_list";
		field.code = {31};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 1;
		field.name = "read_only";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 1;
		field.name = "show_hidden";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 4;
		field.name = "max_queue_ms";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 4;
		field.name = "max_queue_size";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 8;
		field.name = "limit_no_chunk";
		field.value = vnx::to_string(1048576);
		field.code = {4};
	}
	type_code->build();
	return type_code;
}

void FileServerBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> FileServerBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
		case 0x5e72c602475397dull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_delete_file>(_method);
			auto _return_value = ::vnx::addons::FileServer_delete_file_return::create();
			delete_file(_args->path);
			return _return_value;
		}
		case 0xd0dde082f276b7f1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_get_file_info>(_method);
			auto _return_value = ::vnx::addons::FileServer_get_file_info_return::create();
			_return_value->_ret_0 = get_file_info(_args->path);
			return _return_value;
		}
		case 0xa5cb89d5e0389183ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_read_directory>(_method);
			auto _return_value = ::vnx::addons::FileServer_read_directory_return::create();
			_return_value->_ret_0 = read_directory(_args->path);
			return _return_value;
		}
		case 0x36d7fc9c72b884e6ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_read_file>(_method);
			auto _return_value = ::vnx::addons::FileServer_read_file_return::create();
			_return_value->_ret_0 = read_file(_args->path);
			return _return_value;
		}
		case 0x1294e2e1e6847490ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_read_file_range>(_method);
			auto _return_value = ::vnx::addons::FileServer_read_file_range_return::create();
			_return_value->_ret_0 = read_file_range(_args->path, _args->offset, _args->length);
			return _return_value;
		}
		case 0xf08166843cfcec65ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::FileServer_write_file>(_method);
			auto _return_value = ::vnx::addons::FileServer_write_file_return::create();
			write_file(_args->path, _args->data);
			return _return_value;
		}
		case 0xe0b6c38f619bad92ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::HttpComponent_http_request>(_method);
			http_request_async(_args->request, _args->sub_path, _request_id);
			return nullptr;
		}
		case 0x97e79d08440406d5ull: {
			auto _args = std::static_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk>(_method);
			http_request_chunk_async(_args->request, _args->sub_path, _args->offset, _args->max_bytes, _request_id);
			return nullptr;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->method = _method->get_type_name();
	return _ex;
}

void FileServerBase::http_request_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void FileServerBase::http_request_chunk_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpData>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_chunk_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}


} // namespace vnx
} // namespace addons


namespace vnx {

void read(TypeInput& in, ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.allow_directory_list, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.read_only, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.show_hidden, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.max_queue_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.max_queue_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.limit_no_chunk, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.www_root, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.mime_type_map, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.directory_files, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.redirect_not_found, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::addons::vnx_native_type_code_FileServerBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::addons::FileServerBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(19);
	vnx::write_value(_buf + 0, value.allow_directory_list);
	vnx::write_value(_buf + 1, value.read_only);
	vnx::write_value(_buf + 2, value.show_hidden);
	vnx::write_value(_buf + 3, value.max_queue_ms);
	vnx::write_value(_buf + 7, value.max_queue_size);
	vnx::write_value(_buf + 11, value.limit_no_chunk);
	vnx::write(out, value.www_root, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.mime_type_map, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.directory_files, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.redirect_not_found, type_code, type_code->fields[3].code.data());
}

void read(std::istream& in, ::vnx::addons::FileServerBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::addons::FileServerBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::addons::FileServerBase& value) {
	value.accept(visitor);
}

} // vnx
