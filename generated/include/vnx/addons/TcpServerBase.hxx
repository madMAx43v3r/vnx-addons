
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_TcpServerBase_HXX_
#define INCLUDE_vnx_addons_TcpServerBase_HXX_

#include <vnx/addons/package.hxx>
#include <vnx/Module.h>


namespace vnx {
namespace addons {

class VNX_ADDONS_EXPORT TcpServerBase : public ::vnx::Module {
public:
	
	int32_t port = -1;
	std::string host = "localhost";
	int32_t max_connections = -1;
	int32_t listen_queue_size = 100;
	int32_t stats_interval_ms = -1;
	int32_t connection_timeout_ms = -1;
	int32_t send_buffer_size = 0;
	int32_t receive_buffer_size = 0;
	vnx::bool_t tcp_no_delay = false;
	vnx::bool_t tcp_keepalive = true;
	vnx::bool_t show_warnings = false;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x336d98e915472200ull;
	
	TcpServerBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const TcpServerBase& _value);
	friend std::istream& operator>>(std::istream& _in, TcpServerBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};

template<typename T>
void TcpServerBase::accept_generic(T& _visitor) const {
	_visitor.template type_begin<TcpServerBase>(11);
	_visitor.type_field("port", 0); _visitor.accept(port);
	_visitor.type_field("host", 1); _visitor.accept(host);
	_visitor.type_field("max_connections", 2); _visitor.accept(max_connections);
	_visitor.type_field("listen_queue_size", 3); _visitor.accept(listen_queue_size);
	_visitor.type_field("stats_interval_ms", 4); _visitor.accept(stats_interval_ms);
	_visitor.type_field("connection_timeout_ms", 5); _visitor.accept(connection_timeout_ms);
	_visitor.type_field("send_buffer_size", 6); _visitor.accept(send_buffer_size);
	_visitor.type_field("receive_buffer_size", 7); _visitor.accept(receive_buffer_size);
	_visitor.type_field("tcp_no_delay", 8); _visitor.accept(tcp_no_delay);
	_visitor.type_field("tcp_keepalive", 9); _visitor.accept(tcp_keepalive);
	_visitor.type_field("show_warnings", 10); _visitor.accept(show_warnings);
	_visitor.template type_end<TcpServerBase>(11);
}


} // namespace vnx
} // namespace addons


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_addons_TcpServerBase_HXX_
