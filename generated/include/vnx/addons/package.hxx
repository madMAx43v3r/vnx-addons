
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_PACKAGE_HXX_
#define INCLUDE_vnx_addons_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>

#ifdef VNX_ADDONS_EXPORT_ENABLE
#include <vnx_addons_export.h>
#else
#ifndef VNX_ADDONS_EXPORT
#define VNX_ADDONS_EXPORT
#endif
#endif


namespace vnx {
namespace addons {

void register_all_types();


class CompressedValue;
class DeflatedValue;
class FileServerBase;
class FileServer_delete_file;
class FileServer_delete_file_return;
class FileServer_get_file_info;
class FileServer_get_file_info_return;
class FileServer_read_directory;
class FileServer_read_directory_return;
class FileServer_read_file;
class FileServer_read_file_return;
class FileServer_read_file_range;
class FileServer_read_file_range_return;
class FileServer_write_file;
class FileServer_write_file_return;
class HttpBalancerBase;
class HttpChunk;
class HttpClientBase;
class HttpClient_get;
class HttpClient_get_return;
class HttpClient_get_json;
class HttpClient_get_json_return;
class HttpClient_get_text;
class HttpClient_get_text_return;
class HttpClient_post;
class HttpClient_post_return;
class HttpClient_post_json;
class HttpClient_post_json_return;
class HttpClient_post_text;
class HttpClient_post_text_return;
class HttpComponent;
class HttpComponent_http_request;
class HttpComponent_http_request_return;
class HttpComponent_http_request_chunk;
class HttpComponent_http_request_chunk_return;
class HttpData;
class HttpRequest;
class HttpResponse;
class HttpServerBase;
class HttpSession;
class MsgServerBase;
class TcpServerBase;
struct file_info_t;
struct http_request_options_t;
struct permission_e;

VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_CompressedValue; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_DeflatedValue; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServerBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_delete_file; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_delete_file_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_get_file_info; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_get_file_info_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_directory; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_directory_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_file; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_file_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_file_range; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_read_file_range_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_write_file; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_FileServer_write_file_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpBalancerBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpChunk; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClientBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get_json; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get_json_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get_text; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_get_text_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post_json; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post_json_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post_text; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpClient_post_text_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpComponent_http_request; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpComponent_http_request_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpComponent_http_request_chunk; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpComponent_http_request_chunk_return; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpData; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpRequest; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpResponse; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpServerBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_HttpSession; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_MsgServerBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_TcpServerBase; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_file_info_t; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_http_request_options_t; ///< \private
VNX_ADDONS_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_permission_e; ///< \private

} // namespace vnx
} // namespace addons


namespace vnx {

void read(TypeInput& in, ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_delete_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_delete_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_get_file_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_get_file_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_directory& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_directory_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_file_range& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_read_file_range_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_write_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::FileServer_write_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpBalancerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpChunk& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClientBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get_json& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get_json_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_get_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post_json& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post_json_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpClient_post_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpComponent& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_chunk& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_chunk_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpRequest& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpResponse& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::HttpSession& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::MsgServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::TcpServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::file_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::http_request_options_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::addons::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_delete_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_delete_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_get_file_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_get_file_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_directory& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_directory_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_range& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_range_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_write_file& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::FileServer_write_file_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpBalancerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpChunk& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClientBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_json& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_json_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_json& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_json_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpComponent& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_chunk& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_chunk_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpRequest& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpResponse& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::HttpSession& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::MsgServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::TcpServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::file_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::http_request_options_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::addons::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::vnx::addons::CompressedValue& value); ///< \private
void read(std::istream& in, ::vnx::addons::DeflatedValue& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServerBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_delete_file& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_delete_file_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_get_file_info& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_get_file_info_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_directory& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_directory_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_file& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_file_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_file_range& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_read_file_range_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_write_file& value); ///< \private
void read(std::istream& in, ::vnx::addons::FileServer_write_file_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpBalancerBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpChunk& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClientBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get_json& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get_json_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get_text& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_get_text_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post_json& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post_json_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post_text& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpClient_post_text_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpComponent& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpComponent_http_request& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_chunk& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_chunk_return& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpData& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpRequest& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpResponse& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpServerBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::HttpSession& value); ///< \private
void read(std::istream& in, ::vnx::addons::MsgServerBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::TcpServerBase& value); ///< \private
void read(std::istream& in, ::vnx::addons::file_info_t& value); ///< \private
void read(std::istream& in, ::vnx::addons::http_request_options_t& value); ///< \private
void read(std::istream& in, ::vnx::addons::permission_e& value); ///< \private

void write(std::ostream& out, const ::vnx::addons::CompressedValue& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::DeflatedValue& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_delete_file& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_delete_file_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_get_file_info& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_get_file_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_directory& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_directory_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_file& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_range& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_range_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_write_file& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::FileServer_write_file_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpBalancerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpChunk& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClientBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get_json& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get_json_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get_text& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_get_text_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post_json& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post_json_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post_text& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpClient_post_text_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpComponent& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_chunk& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_chunk_return& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpData& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpRequest& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpResponse& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::HttpSession& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::MsgServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::TcpServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::file_info_t& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::http_request_options_t& value); ///< \private
void write(std::ostream& out, const ::vnx::addons::permission_e& value); ///< \private

void accept(Visitor& visitor, const ::vnx::addons::CompressedValue& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::DeflatedValue& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_delete_file& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_delete_file_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_get_file_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_get_file_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_directory& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_directory_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_range& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_range_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_write_file& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::FileServer_write_file_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpBalancerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpChunk& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClientBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_json& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_json_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_text& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_text_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_json& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_json_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_text& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_text_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpComponent& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_chunk& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_chunk_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpData& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpRequest& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpResponse& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::HttpSession& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::MsgServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::TcpServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::file_info_t& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::http_request_options_t& value); ///< \private
void accept(Visitor& visitor, const ::vnx::addons::permission_e& value); ///< \private

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::CompressedValue> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::DeflatedValue> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_delete_file> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_delete_file_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_get_file_info> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_get_file_info_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_directory> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_directory_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_range> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_range_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_write_file> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_write_file_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpChunk> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_json> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_json_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_text> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_text_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_json> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_json_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_text> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_text_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_chunk> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_chunk_return> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpData> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpRequest> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpResponse> value); ///< \private
template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpSession> value); ///< \private

/// \private
template<>
struct type<::vnx::addons::CompressedValue> {
	void read(TypeInput& in, ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::CompressedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::CompressedValue& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::CompressedValue& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::CompressedValue& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::CompressedValue& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::DeflatedValue> {
	void read(TypeInput& in, ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::DeflatedValue& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::DeflatedValue& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::DeflatedValue& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::DeflatedValue& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::DeflatedValue& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServerBase> {
	void read(TypeInput& in, ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::FileServer_delete_file> {
	void read(TypeInput& in, ::vnx::addons::FileServer_delete_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_delete_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_delete_file& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_delete_file& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_delete_file& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_delete_file& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_delete_file_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_delete_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_delete_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_delete_file_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_delete_file_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_delete_file_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_delete_file_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_get_file_info> {
	void read(TypeInput& in, ::vnx::addons::FileServer_get_file_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_get_file_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_get_file_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_get_file_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_get_file_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_get_file_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_get_file_info_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_get_file_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_get_file_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_get_file_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_get_file_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_get_file_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_get_file_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_directory> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_directory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_directory& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_directory& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_directory& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_directory& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_directory& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_directory_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_directory_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_directory_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_directory_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_directory_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_directory_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_directory_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_file> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_file& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_file& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_file& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_file_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_file_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_file_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_file_range> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_file_range& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_range& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_file_range& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_range& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_range& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_file_range& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_read_file_range_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_read_file_range_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_read_file_range_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_read_file_range_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_read_file_range_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_read_file_range_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_read_file_range_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_write_file> {
	void read(TypeInput& in, ::vnx::addons::FileServer_write_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_write_file& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_write_file& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_write_file& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_write_file& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_write_file& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::FileServer_write_file_return> {
	void read(TypeInput& in, ::vnx::addons::FileServer_write_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::FileServer_write_file_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::FileServer_write_file_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::FileServer_write_file_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::FileServer_write_file_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::FileServer_write_file_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpBalancerBase> {
	void read(TypeInput& in, ::vnx::addons::HttpBalancerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpBalancerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpBalancerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpBalancerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpBalancerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::HttpChunk> {
	void read(TypeInput& in, ::vnx::addons::HttpChunk& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpChunk& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpChunk& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpChunk& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpChunk& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpChunk& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClientBase> {
	void read(TypeInput& in, ::vnx::addons::HttpClientBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClientBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClientBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClientBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClientBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get_json> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get_json& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_json& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get_json& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get_json& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_json& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get_json& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get_json_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get_json_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_json_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get_json_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get_json_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_json_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get_json_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get_text> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get_text& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get_text& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_text& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get_text& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_get_text_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_get_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_get_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_get_text_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_get_text_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_get_text_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_get_text_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post_json> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post_json& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_json& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post_json& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post_json& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_json& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post_json& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post_json_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post_json_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_json_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post_json_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post_json_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_json_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post_json_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post_text> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post_text& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post_text& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_text& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post_text& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpClient_post_text_return> {
	void read(TypeInput& in, ::vnx::addons::HttpClient_post_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpClient_post_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpClient_post_text_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpClient_post_text_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpClient_post_text_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpClient_post_text_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpComponent> {
	void read(TypeInput& in, ::vnx::addons::HttpComponent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpComponent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpComponent& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpComponent& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpComponent& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::HttpComponent_http_request> {
	void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpComponent_http_request& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpComponent_http_request& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpComponent_http_request_return> {
	void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpComponent_http_request_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpComponent_http_request_chunk> {
	void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_chunk& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_chunk& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_chunk& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_chunk& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_chunk& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpComponent_http_request_chunk& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpComponent_http_request_chunk_return> {
	void read(TypeInput& in, ::vnx::addons::HttpComponent_http_request_chunk_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpComponent_http_request_chunk_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpComponent_http_request_chunk_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpComponent_http_request_chunk_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpComponent_http_request_chunk_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpComponent_http_request_chunk_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpData> {
	void read(TypeInput& in, ::vnx::addons::HttpData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpData& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpData& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpRequest> {
	void read(TypeInput& in, ::vnx::addons::HttpRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpRequest& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpRequest& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpRequest& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpRequest& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpResponse> {
	void read(TypeInput& in, ::vnx::addons::HttpResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpResponse& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpResponse& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpResponse& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpResponse& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::HttpServerBase> {
	void read(TypeInput& in, ::vnx::addons::HttpServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::HttpSession> {
	void read(TypeInput& in, ::vnx::addons::HttpSession& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::HttpSession& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::HttpSession& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::HttpSession& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::HttpSession& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::HttpSession& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::MsgServerBase> {
	void read(TypeInput& in, ::vnx::addons::MsgServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::MsgServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::MsgServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::MsgServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::MsgServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::TcpServerBase> {
	void read(TypeInput& in, ::vnx::addons::TcpServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::TcpServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::TcpServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::TcpServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::TcpServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::addons::file_info_t> {
	void read(TypeInput& in, ::vnx::addons::file_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::file_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::file_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::file_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::file_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::file_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::http_request_options_t> {
	void read(TypeInput& in, ::vnx::addons::http_request_options_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::http_request_options_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::http_request_options_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::http_request_options_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::http_request_options_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::http_request_options_t& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::addons::permission_e> {
	void read(TypeInput& in, ::vnx::addons::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::addons::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::addons::permission_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::addons::permission_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::addons::permission_e& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::addons::permission_e& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_vnx_addons_PACKAGE_HXX_
