
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_addons_ACCEPT_GENERIC_HXX_
#define INCLUDE_vnx_addons_ACCEPT_GENERIC_HXX_

#include <vnx/addons/CompressedValue.hxx>
#include <vnx/addons/DeflatedValue.hxx>
#include <vnx/addons/FileServer_delete_file.hxx>
#include <vnx/addons/FileServer_delete_file_return.hxx>
#include <vnx/addons/FileServer_get_file_info.hxx>
#include <vnx/addons/FileServer_get_file_info_return.hxx>
#include <vnx/addons/FileServer_read_directory.hxx>
#include <vnx/addons/FileServer_read_directory_return.hxx>
#include <vnx/addons/FileServer_read_file.hxx>
#include <vnx/addons/FileServer_read_file_return.hxx>
#include <vnx/addons/FileServer_read_file_range.hxx>
#include <vnx/addons/FileServer_read_file_range_return.hxx>
#include <vnx/addons/FileServer_write_file.hxx>
#include <vnx/addons/FileServer_write_file_return.hxx>
#include <vnx/addons/HttpChunk.hxx>
#include <vnx/addons/HttpClient_get.hxx>
#include <vnx/addons/HttpClient_get_return.hxx>
#include <vnx/addons/HttpClient_get_json.hxx>
#include <vnx/addons/HttpClient_get_json_return.hxx>
#include <vnx/addons/HttpClient_get_text.hxx>
#include <vnx/addons/HttpClient_get_text_return.hxx>
#include <vnx/addons/HttpClient_post.hxx>
#include <vnx/addons/HttpClient_post_return.hxx>
#include <vnx/addons/HttpClient_post_json.hxx>
#include <vnx/addons/HttpClient_post_json_return.hxx>
#include <vnx/addons/HttpClient_post_text.hxx>
#include <vnx/addons/HttpClient_post_text_return.hxx>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpData.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>
#include <vnx/addons/HttpSession.hxx>


namespace vnx {

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::CompressedValue> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::addons::DeflatedValue>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::DeflatedValue> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_delete_file> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_delete_file_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_get_file_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_get_file_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_directory> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_directory_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_range> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_read_file_range_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_write_file> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::FileServer_write_file_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpChunk> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_json> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_json_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_text> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_get_text_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_json> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_json_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_text> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpClient_post_text_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_chunk> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpComponent_http_request_chunk_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpData> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::addons::HttpChunk>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::addons::HttpResponse>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpRequest> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpResponse> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::addons::HttpSession> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}



} // namespace vnx

#endif // INCLUDE_vnx_addons_ACCEPT_GENERIC_HXX_
